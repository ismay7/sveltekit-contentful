function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import copy from 'fast-copy';
import { toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
/**
 * @private
 */
export default function createAppActionCallApi(makeRequest, retryOptions) {
  return {
    createWithResponse: function createWithResponse() {
      const payload = {
        parameters: {
          recipient: 'Alice <alice@my-company.com>',
          message_body: 'Hello from Bob!'
        }
      };
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'createWithResponse',
        params: _objectSpread({
          spaceId: 'space-id',
          environmentId: 'environment-id',
          appDefinitionId: 'app-definiton-id',
          appActionId: 'app-action-id'
        }, retryOptions),
        payload: payload
      }).then(data => wrapAppActionCallResponse(makeRequest, data));
    },
    getCallDetails: function getCallDetails() {
      return makeRequest({
        entityType: 'AppActionCall',
        action: 'getCallDetails',
        params: {
          spaceId: 'space-id',
          environmentId: 'environment-id',
          callId: 'call-id',
          appActionId: 'app-action-id'
        }
      }).then(data => wrapAppActionCallResponse(makeRequest, data));
    }
  };
}

/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw AppActionCall data
 * @return Wrapped AppActionCall data
 */
export function wrapAppActionCall(makeRequest, data) {
  const signedRequest = toPlainObject(copy(data));
  const signedRequestWithMethods = enhanceWithMethods(signedRequest, createAppActionCallApi(makeRequest));
  return signedRequestWithMethods;
}

/**
 * @private
 * @param http - HTTP client instance
 * @param data - Raw AppActionCall data
 * @return Wrapped AppActionCall data
 */
export function wrapAppActionCallResponse(makeRequest, data, retryOptions) {
  const appActionCallResponse = toPlainObject(copy(data));
  const appActionCallResponseWithMethods = enhanceWithMethods(appActionCallResponse, createAppActionCallApi(makeRequest, retryOptions));
  return appActionCallResponseWithMethods;
}